"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = __importDefault(require("got"));
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const util_1 = require("util");
const perf_hooks_1 = require("perf_hooks");
const os_1 = __importDefault(require("os"));
const webdriverio_1 = require("webdriverio");
const BrowserstackLocalLauncher = __importStar(require("browserstack-local"));
const logger_1 = __importDefault(require("@wdio/logger"));
// @ts-ignore
const package_json_1 = require("../package.json");
const constants_1 = require("./constants");
const util_2 = require("./util");
const log = (0, logger_1.default)('@wdio/browserstack-service');
class BrowserstackLauncherService {
    constructor(_options, capabilities, _config) {
        this._options = _options;
        this._config = _config;
        // added to maintain backward compatibility with webdriverIO v5
        this._config || (this._config = _options);
        if (Array.isArray(capabilities)) {
            capabilities.forEach((capability) => {
                var _a, _b;
                if (!capability['bstack:options']) {
                    const extensionCaps = Object.keys(capability).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        capability['bstack:options'] = { wdioService: package_json_1.version };
                    }
                    else if ((0, util_2.shouldAddServiceVersion)(this._config, this._options.testObservability)) {
                        capability['browserstack.wdioService'] = package_json_1.version;
                    }
                    this._buildIdentifier = (_a = capability['browserstack.buildIdentifier']) === null || _a === void 0 ? void 0 : _a.toString();
                    this._buildName = (_b = capability['build']) === null || _b === void 0 ? void 0 : _b.toString();
                }
                else {
                    capability['bstack:options'].wdioService = package_json_1.version;
                    this._buildName = capability['bstack:options'].buildName;
                    this._projectName = capability['bstack:options'].projectName;
                    this._buildTag = capability['bstack:options'].buildTag;
                    this._buildIdentifier = capability['bstack:options'].buildIdentifier;
                }
            });
        }
        else if (typeof capabilities === 'object') {
            Object.entries(capabilities).forEach(([, caps]) => {
                if (!caps.capabilities['bstack:options']) {
                    const extensionCaps = Object.keys(caps.capabilities).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        caps.capabilities['bstack:options'] = { wdioService: package_json_1.version };
                    }
                    else if ((0, util_2.shouldAddServiceVersion)(this._config, this._options.testObservability)) {
                        caps.capabilities['browserstack.wdioService'] = package_json_1.version;
                    }
                    this._buildIdentifier = caps.capabilities['browserstack.buildIdentifier'];
                }
                else {
                    const bstackOptions = caps.capabilities['bstack:options'];
                    bstackOptions.wdioService = package_json_1.version;
                    this._buildName = bstackOptions.buildName;
                    this._projectName = bstackOptions.projectName;
                    this._buildTag = bstackOptions.buildTag;
                    this._buildIdentifier = bstackOptions.buildIdentifier;
                }
            });
        }
        // by default observability will be true unless specified as false
        this._options.testObservability = this._options.testObservability == false ? false : true;
        if (this._options.testObservability &&
            // update files to run if it's a rerun
            process.env.BROWSERSTACK_RERUN && process.env.BROWSERSTACK_RERUN_TESTS) {
            this._config.specs = process.env.BROWSERSTACK_RERUN_TESTS.split(',');
        }
    }
    async onPrepare(config, capabilities) {
        /**
         * Upload app to BrowserStack if valid file path to app is given.
         * Update app value of capability directly if app_url, custom_id, shareable_id is given
         */
        if (!this._options.app) {
            log.info('app is not defined in browserstack-service config, skipping ...');
        }
        else {
            let app = {};
            let appConfig = this._options.app;
            try {
                app = await this._validateApp(appConfig);
            }
            catch (error) {
                throw new webdriverio_1.SevereServiceError(error);
            }
            if (constants_1.VALID_APP_EXTENSION.includes(path_1.default.extname(app.app))) {
                if (fs_1.default.existsSync(app.app)) {
                    let data;
                    data = await this._uploadApp(app);
                    log.info(`app upload completed: ${JSON.stringify(data)}`);
                    app.app = data.app_url;
                }
                else if (app.customId) {
                    app.app = app.customId;
                }
                else {
                    throw new webdriverio_1.SevereServiceError('[Invalid app path] app path ${app.app} is not correct, Provide correct path to app under test');
                }
            }
            log.info(`Using app: ${app.app}`);
            this._updateCaps(capabilities, 'app', app.app);
        }
        /**
         * buildIdentifier in service options will take precedence over specified in capabilities
        */
        if (this._options.buildIdentifier) {
            this._buildIdentifier = this._options.buildIdentifier;
            this._updateCaps(capabilities, 'buildIdentifier', this._buildIdentifier);
        }
        /**
         * evaluate buildIdentifier in case unique execution identifiers are present
         * e.g., ${BUILD_NUMBER} and ${DATE_TIME}
        */
        this._handleBuildIdentifier(capabilities);
        if (this._options.testObservability) {
            log.debug('Sending launch start event');
            await (0, util_2.launchTestSession)(this._options, this._config, {
                projectName: this._projectName,
                buildName: this._buildName,
                buildTag: this._buildTag,
                bstackServiceVersion: package_json_1.version,
                buildIdentifier: this._buildIdentifier
            });
        }
        if (!this._options.browserstackLocal) {
            return log.info('browserstackLocal is not enabled - skipping...');
        }
        const opts = {
            key: this._config.key,
            ...this._options.opts
        };
        this.browserstackLocal = new BrowserstackLocalLauncher.Local();
        this._updateCaps(capabilities, 'local');
        if (opts.localIdentifier) {
            this._updateCaps(capabilities, 'localIdentifier', opts.localIdentifier);
        }
        /**
         * measure BrowserStack tunnel boot time
         */
        const obs = new perf_hooks_1.PerformanceObserver((list) => {
            const entry = list.getEntries()[0];
            log.info(`Browserstack Local successfully started after ${entry.duration}ms`);
        });
        obs.observe({ entryTypes: ['measure'] });
        let timer;
        perf_hooks_1.performance.mark('tbTunnelStart');
        return Promise.race([
            (0, util_1.promisify)(this.browserstackLocal.start.bind(this.browserstackLocal))(opts),
            new Promise((resolve, reject) => {
                /* istanbul ignore next */
                timer = setTimeout(function () {
                    reject('Browserstack Local failed to start within 60 seconds!');
                }, 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            perf_hooks_1.performance.mark('tbTunnelEnd');
            perf_hooks_1.performance.measure('bootTime', 'tbTunnelStart', 'tbTunnelEnd');
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
    async onComplete() {
        if (this._options.testObservability) {
            log.debug('Sending stop launch event');
            await (0, util_2.stopBuildUpstream)();
            if (process.env.BS_TESTOPS_BUILD_HASHED_ID) {
                console.log(`\nVisit https://observability.browserstack.com/builds/${process.env.BS_TESTOPS_BUILD_HASHED_ID} to view build report, insights, and many more debugging information all at one place!\n`);
            }
        }
        if (!this.browserstackLocal || !this.browserstackLocal.isRunning()) {
            return;
        }
        if (this._options.forcedStop) {
            return process.kill(this.browserstackLocal.pid);
        }
        let timer;
        return Promise.race([
            new Promise((resolve, reject) => {
                var _a;
                (_a = this.browserstackLocal) === null || _a === void 0 ? void 0 : _a.stop((err) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve();
                });
            }),
            new Promise((resolve, reject) => {
                /* istanbul ignore next */
                timer = setTimeout(() => reject(new Error('Browserstack Local failed to stop within 60 seconds!')), 60000);
            })
        ]).then(function (result) {
            clearTimeout(timer);
            return Promise.resolve(result);
        }, function (err) {
            clearTimeout(timer);
            return Promise.reject(err);
        });
    }
    async _uploadApp(app) {
        log.info(`uploading app ${app.app} ${app.customId ? `and custom_id: ${app.customId}` : ''} to browserstack`);
        const form = new form_data_1.default();
        if (app.app)
            form.append('file', fs_1.default.createReadStream(app.app));
        if (app.customId)
            form.append('custom_id', app.customId);
        const res = await got_1.default.post('https://api-cloud.browserstack.com/app-automate/upload', {
            body: form,
            username: this._config.user,
            password: this._config.key
        }).json().catch((err) => {
            throw new webdriverio_1.SevereServiceError(`app upload failed ${err.message}`);
        });
        return res;
    }
    /**
     * @param  {String | AppConfig}  appConfig    <string>: should be "app file path" or "app_url" or "custom_id" or "shareable_id".
     *                                            <object>: only "path" and "custom_id" should coexist as multiple properties.
     */
    async _validateApp(appConfig) {
        let app = {};
        if (typeof appConfig === 'string') {
            app.app = appConfig;
        }
        else if (typeof appConfig === 'object' && Object.keys(appConfig).length) {
            if (Object.keys(appConfig).length > 2 || (Object.keys(appConfig).length === 2 && (!appConfig.path || !appConfig.custom_id))) {
                throw new webdriverio_1.SevereServiceError(`keys ${Object.keys(appConfig)} can't co-exist as app values, use any one property from
                            {id<string>, path<string>, custom_id<string>, shareable_id<string>}, only "path" and "custom_id" can co-exist.`);
            }
            app.app = appConfig.id || appConfig.path || appConfig.custom_id || appConfig.shareable_id;
            app.customId = appConfig.custom_id;
        }
        else {
            throw new webdriverio_1.SevereServiceError('[Invalid format] app should be string or an object');
        }
        if (!app.app) {
            throw new webdriverio_1.SevereServiceError(`[Invalid app property] supported properties are {id<string>, path<string>, custom_id<string>, shareable_id<string>}.
                    For more details please visit https://www.browserstack.com/docs/app-automate/appium/set-up-tests/specify-app ')`);
        }
        return app;
    }
    _updateCaps(capabilities, capType, value) {
        if (Array.isArray(capabilities)) {
            capabilities.forEach((capability) => {
                if (!capability['bstack:options']) {
                    const extensionCaps = Object.keys(capability).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        if (capType === 'local') {
                            capability['bstack:options'] = { local: true };
                        }
                        else if (capType === 'app') {
                            capability['appium:app'] = value;
                        }
                        else if (capType === 'buildIdentifier' && value) {
                            capability['bstack:options'] = { buildIdentifier: value };
                        }
                    }
                    else if (capType === 'local') {
                        capability['browserstack.local'] = true;
                    }
                    else if (capType === 'app') {
                        capability.app = value;
                    }
                    else if (capType === 'buildIdentifier') {
                        if (value) {
                            capability['browserstack.buildIdentifier'] = value;
                        }
                        else {
                            delete capability['browserstack.buildIdentifier'];
                        }
                    }
                    else if (capType === 'localIdentifier') {
                        capability['browserstack.localIdentifier'] = value;
                    }
                }
                else if (capType === 'local') {
                    capability['bstack:options'].local = true;
                }
                else if (capType === 'app') {
                    capability['appium:app'] = value;
                }
                else if (capType === 'buildIdentifier') {
                    if (value) {
                        capability['bstack:options'].buildIdentifier = value;
                    }
                    else {
                        delete capability['bstack:options'].buildIdentifier;
                    }
                }
                else if (capType === 'localIdentifier') {
                    capability['bstack:options'].localIdentifier = value;
                }
            });
        }
        else if (typeof capabilities === 'object') {
            Object.entries(capabilities).forEach(([, caps]) => {
                if (!caps.capabilities['bstack:options']) {
                    const extensionCaps = Object.keys(caps.capabilities).filter((cap) => cap.includes(':'));
                    if (extensionCaps.length) {
                        if (capType === 'local') {
                            caps.capabilities['bstack:options'] = { local: true };
                        }
                        else if (capType === 'app') {
                            caps.capabilities['appium:app'] = value;
                        }
                        else if (capType === 'buildIdentifier' && value) {
                            caps.capabilities['bstack:options'] = { buildIdentifier: value };
                        }
                    }
                    else if (capType === 'local') {
                        caps.capabilities['browserstack.local'] = true;
                    }
                    else if (capType === 'app') {
                        caps.capabilities.app = value;
                    }
                    else if (capType === 'buildIdentifier') {
                        if (value) {
                            caps.capabilities['browserstack.buildIdentifier'] = value;
                        }
                        else {
                            delete caps.capabilities['browserstack.buildIdentifier'];
                        }
                    }
                    else if (capType === 'localIdentifier') {
                        caps.capabilities['browserstack.localIdentifier'] = value;
                    }
                }
                else if (capType === 'local') {
                    caps.capabilities['bstack:options'].local = true;
                }
                else if (capType === 'app') {
                    caps.capabilities['appium:app'] = value;
                }
                else if (capType === 'buildIdentifier') {
                    if (value) {
                        caps.capabilities['bstack:options'].buildIdentifier = value;
                    }
                    else {
                        delete caps.capabilities['bstack:options'].buildIdentifier;
                    }
                }
                else if (capType === 'localIdentifier') {
                    caps.capabilities['bstack:options'].localIdentifier = value;
                }
            });
        }
        else {
            throw new webdriverio_1.SevereServiceError('Capabilities should be an object or Array!');
        }
    }
    _handleBuildIdentifier(capabilities) {
        if (!this._buildIdentifier) {
            return;
        }
        if ((!this._buildName || process.env.BROWSERSTACK_BUILD_NAME) && this._buildIdentifier) {
            this._updateCaps(capabilities, 'buildIdentifier');
            log.warn('Skipping buildIdentifier as buildName is not passed.');
            return;
        }
        if (this._buildIdentifier && this._buildIdentifier.includes('${DATE_TIME}')) {
            const formattedDate = new Intl.DateTimeFormat('en-GB', {
                month: 'short',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                hour12: false
            })
                .format(new Date())
                .replace(/ |, /g, '-');
            this._buildIdentifier = this._buildIdentifier.replace('${DATE_TIME}', formattedDate);
            this._updateCaps(capabilities, 'buildIdentifier', this._buildIdentifier);
        }
        if (!this._buildIdentifier.includes('${BUILD_NUMBER}')) {
            return;
        }
        const ciInfo = (0, util_2.getCiInfo)();
        if (ciInfo && ciInfo.build_number) {
            this._buildIdentifier = this._buildIdentifier.replace('${BUILD_NUMBER}', 'CI ' + ciInfo.build_number);
            this._updateCaps(capabilities, 'buildIdentifier', this._buildIdentifier);
        }
        else {
            const localBuildNumber = this._getLocalBuildNumber();
            if (localBuildNumber) {
                this._buildIdentifier = this._buildIdentifier.replace('${BUILD_NUMBER}', localBuildNumber);
                this._updateCaps(capabilities, 'buildIdentifier', this._buildIdentifier);
            }
        }
    }
    /**
     * @return {string} if buildName doesn't exist in json file, it will return 1
     *                  else returns corresponding value in json file (e.g. { "wdio-build": { "identifier" : 2 } } => 2 in this case)
     */
    _getLocalBuildNumber() {
        let browserstackFolderPath = path_1.default.join(os_1.default.homedir(), '.browserstack');
        try {
            if (!fs_1.default.existsSync(browserstackFolderPath)) {
                fs_1.default.mkdirSync(browserstackFolderPath);
            }
            let filePath = path_1.default.join(browserstackFolderPath, '.build-name-cache.json');
            if (!fs_1.default.existsSync(filePath)) {
                fs_1.default.appendFileSync(filePath, JSON.stringify({}));
            }
            const buildCacheFileData = fs_1.default.readFileSync(filePath);
            const parsedBuildCacheFileData = JSON.parse(buildCacheFileData.toString());
            if (this._buildName && this._buildName in parsedBuildCacheFileData) {
                const prevIdentifier = parseInt((parsedBuildCacheFileData[this._buildName]['identifier']));
                const newIdentifier = prevIdentifier + 1;
                this._updateLocalBuildCache(filePath, this._buildName, newIdentifier);
                return newIdentifier.toString();
            }
            const newIdentifier = 1;
            this._updateLocalBuildCache(filePath, this._buildName, 1);
            return newIdentifier.toString();
        }
        catch (error) {
            return null;
        }
    }
    _updateLocalBuildCache(filePath, buildName, buildIdentifier) {
        if (!buildName || !filePath) {
            return;
        }
        let jsonContent = JSON.parse(fs_1.default.readFileSync(filePath).toString());
        jsonContent[buildName] = { 'identifier': buildIdentifier };
        fs_1.default.writeFileSync(filePath, JSON.stringify(jsonContent));
    }
}
exports.default = BrowserstackLauncherService;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sleep = exports.getObservabilityBuildTags = exports.getObservabilityBuild = exports.getObservabilityProject = exports.getObservabilityKey = exports.getObservabilityUser = exports.batchAndPostEvents = exports.shouldAddServiceVersion = exports.isScreenshotCommand = exports.getHookType = exports.getHierarchy = exports.uploadEventData = exports.getLogTag = exports.removeAnsiColors = exports.getScenarioExamples = exports.isBrowserstackSession = exports.getCloudProvider = exports.getUniqueIdentifierForCucumber = exports.getUniqueIdentifier = exports.getGitMetaData = exports.getCiInfo = exports.stopBuildUpstream = exports.launchTestSession = exports.getParentSuiteName = exports.isBrowserstackCapability = exports.getBrowserCapabilities = exports.getBrowserDescription = void 0;
const os_1 = require("os");
const util_1 = require("util");
const http_1 = __importDefault(require("http"));
const https_1 = __importDefault(require("https"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("@wdio/logger"));
const got_1 = __importStar(require("got"));
const git_repo_info_1 = __importDefault(require("git-repo-info"));
const gitconfiglocal_1 = __importDefault(require("gitconfiglocal"));
const constants_1 = require("./constants");
const request_handler_1 = __importDefault(require("./request-handler"));
const pGitconfig = (0, util_1.promisify)(gitconfiglocal_1.default);
const log = (0, logger_1.default)('@wdio/browserstack-service');
const DEFAULT_REQUEST_CONFIG = {
    agent: {
        http: new http_1.default.Agent({ keepAlive: true }),
        https: new https_1.default.Agent({ keepAlive: true }),
    },
    headers: {
        'Content-Type': 'application/json',
        'X-BSTACK-OBS': 'true'
    },
};
/**
 * get browser description for Browserstack service
 * @param cap browser capablities
 */
function getBrowserDescription(cap) {
    cap = cap || {};
    if (cap['bstack:options']) {
        cap = { ...cap, ...cap['bstack:options'] };
    }
    /**
     * These keys describe the browser the test was run on
     */
    return constants_1.BROWSER_DESCRIPTION
        .map((k) => cap[k])
        .filter(Boolean)
        .join(' ');
}
exports.getBrowserDescription = getBrowserDescription;
/**
 * get correct browser capabilities object in both multiremote and normal setups
 * @param browser browser object
 * @param caps browser capbilities object. In case of multiremote, the object itself should have a property named 'capabilities'
 * @param browserName browser name in case of multiremote
 */
function getBrowserCapabilities(browser, caps, browserName) {
    if (!browser.isMultiremote) {
        return { ...browser.capabilities, ...caps };
    }
    const multiCaps = caps;
    const globalCap = browserName && browser[browserName] ? browser[browserName].capabilities : {};
    const cap = browserName && multiCaps[browserName] ? multiCaps[browserName].capabilities : {};
    return { ...globalCap, ...cap };
}
exports.getBrowserCapabilities = getBrowserCapabilities;
/**
 * check for browserstack W3C capabilities. Does not support legacy capabilities
 * @param cap browser capabilities
 */
function isBrowserstackCapability(cap) {
    return Boolean(cap &&
        cap['bstack:options'] &&
        // return false if the only cap in bstack:options is wdioService,
        // as that is added by the service and not present in user passed caps
        !(Object.keys(cap['bstack:options']).length === 1 &&
            cap['bstack:options'].wdioService));
}
exports.isBrowserstackCapability = isBrowserstackCapability;
function getParentSuiteName(fullTitle, testSuiteTitle) {
    const fullTitleWords = fullTitle.split(' ');
    const testSuiteTitleWords = testSuiteTitle.split(' ');
    const shortestLength = Math.min(fullTitleWords.length, testSuiteTitleWords.length);
    let c = 0;
    let parentSuiteName = '';
    while (c < shortestLength && fullTitleWords[c] === testSuiteTitleWords[c]) {
        parentSuiteName += fullTitleWords[c++] + ' ';
    }
    return parentSuiteName.trim();
}
exports.getParentSuiteName = getParentSuiteName;
async function launchTestSession(options, config, bsConfig) {
    const data = {
        format: 'json',
        project_name: getObservabilityProject(options, bsConfig.projectName),
        name: getObservabilityBuild(options, bsConfig.buildName),
        build_identifier: bsConfig.buildIdentifier,
        start_time: (new Date()).toISOString(),
        tags: getObservabilityBuildTags(options, bsConfig.buildTag),
        host_info: {
            hostname: (0, os_1.hostname)(),
            platform: (0, os_1.platform)(),
            type: (0, os_1.type)(),
            version: (0, os_1.version)(),
            arch: (0, os_1.arch)()
        },
        ci_info: getCiInfo(),
        build_run_identifier: process.env.BROWSERSTACK_BUILD_RUN_IDENTIFIER,
        failed_tests_rerun: process.env.BROWSERSTACK_RERUN || false,
        version_control: await getGitMetaData(),
        observability_version: {
            frameworkName: 'WebdriverIO-' + config.framework,
            sdkVersion: bsConfig.bstackServiceVersion
        }
    };
    try {
        const url = `${constants_1.DATA_ENDPOINT}/api/v1/builds`;
        const response = await got_1.default.post(url, {
            ...DEFAULT_REQUEST_CONFIG,
            username: getObservabilityUser(options, config),
            password: getObservabilityKey(options, config),
            json: data
        }).json();
        log.debug(`[Start_Build] Success response: ${JSON.stringify(response)}`);
        process.env.BS_TESTOPS_BUILD_COMPLETED = 'true';
        if (response.jwt)
            process.env.BS_TESTOPS_JWT = response.jwt;
        if (response.build_hashed_id)
            process.env.BS_TESTOPS_BUILD_HASHED_ID = response.build_hashed_id;
        if (response.allow_screenshots)
            process.env.BS_TESTOPS_ALLOW_SCREENSHOTS = response.allow_screenshots.toString();
    }
    catch (error) {
        if (error instanceof got_1.HTTPError && error.response) {
            const errorMessageJson = error.response.body ? JSON.parse(error.response.body.toString()) : null;
            const errorMessage = errorMessageJson ? errorMessageJson.message : null, errorType = errorMessageJson ? errorMessageJson.errorType : null;
            switch (errorType) {
                case 'ERROR_INVALID_CREDENTIALS':
                    log.error(errorMessage);
                    break;
                case 'ERROR_ACCESS_DENIED':
                    log.info(errorMessage);
                    break;
                case 'ERROR_SDK_DEPRECATED':
                    log.error(errorMessage);
                    break;
                default:
                    log.error(errorMessage);
            }
        }
        else {
            log.error(`Data upload to BrowserStack Test Observability failed due to ${error}`);
        }
    }
}
exports.launchTestSession = launchTestSession;
async function stopBuildUpstream() {
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED) {
        return;
    }
    if (!process.env.BS_TESTOPS_JWT) {
        log.debug('[STOP_BUILD] Missing Authentication Token/ Build ID');
        return {
            status: 'error',
            message: 'Token/buildID is undefined, build creation might have failed'
        };
    }
    const data = {
        'stop_time': (new Date()).toISOString()
    };
    try {
        const url = `${constants_1.DATA_ENDPOINT}/api/v1/builds/${process.env.BS_TESTOPS_BUILD_HASHED_ID}/stop`;
        const response = await got_1.default.put(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: data
        }).json();
        log.debug(`[STOP_BUILD] Success response: ${JSON.stringify(response)}`);
        return {
            status: 'success',
            message: ''
        };
    }
    catch (error) {
        log.debug(`[STOP_BUILD] Failed. Error: ${error}`);
        return {
            status: 'error',
            message: error.message
        };
    }
}
exports.stopBuildUpstream = stopBuildUpstream;
function getCiInfo() {
    var env = process.env;
    // Jenkins
    if ((typeof env.JENKINS_URL === 'string' && env.JENKINS_URL.length > 0) || (typeof env.JENKINS_HOME === 'string' && env.JENKINS_HOME.length > 0)) {
        return {
            name: 'Jenkins',
            build_url: env.BUILD_URL,
            job_name: env.JOB_NAME,
            build_number: env.BUILD_NUMBER
        };
    }
    // CircleCI
    if (env.CI === 'true' && env.CIRCLECI === 'true') {
        return {
            name: 'CircleCI',
            build_url: env.CIRCLE_BUILD_URL,
            job_name: env.CIRCLE_JOB,
            build_number: env.CIRCLE_BUILD_NUM
        };
    }
    // Travis CI
    if (env.CI === 'true' && env.TRAVIS === 'true') {
        return {
            name: 'Travis CI',
            build_url: env.TRAVIS_BUILD_WEB_URL,
            job_name: env.TRAVIS_JOB_NAME,
            build_number: env.TRAVIS_BUILD_NUMBER
        };
    }
    // Codeship
    if (env.CI === 'true' && env.CI_NAME === 'codeship') {
        return {
            name: 'Codeship',
            build_url: null,
            job_name: null,
            build_number: null
        };
    }
    // Bitbucket
    if (env.BITBUCKET_BRANCH && env.BITBUCKET_COMMIT) {
        return {
            name: 'Bitbucket',
            build_url: env.BITBUCKET_GIT_HTTP_ORIGIN,
            job_name: null,
            build_number: env.BITBUCKET_BUILD_NUMBER
        };
    }
    // Drone
    if (env.CI === 'true' && env.DRONE === 'true') {
        return {
            name: 'Drone',
            build_url: env.DRONE_BUILD_LINK,
            job_name: null,
            build_number: env.DRONE_BUILD_NUMBER
        };
    }
    // Semaphore
    if (env.CI === 'true' && env.SEMAPHORE === 'true') {
        return {
            name: 'Semaphore',
            build_url: env.SEMAPHORE_ORGANIZATION_URL,
            job_name: env.SEMAPHORE_JOB_NAME,
            build_number: env.SEMAPHORE_JOB_ID
        };
    }
    // GitLab
    if (env.CI === 'true' && env.GITLAB_CI === 'true') {
        return {
            name: 'GitLab',
            build_url: env.CI_JOB_URL,
            job_name: env.CI_JOB_NAME,
            build_number: env.CI_JOB_ID
        };
    }
    // Buildkite
    if (env.CI === 'true' && env.BUILDKITE === 'true') {
        return {
            name: 'Buildkite',
            build_url: env.BUILDKITE_BUILD_URL,
            job_name: env.BUILDKITE_LABEL || env.BUILDKITE_PIPELINE_NAME,
            build_number: env.BUILDKITE_BUILD_NUMBER
        };
    }
    // Visual Studio Team Services
    if (env.TF_BUILD === 'True') {
        return {
            name: 'Visual Studio Team Services',
            build_url: `${env.SYSTEM_TEAMFOUNDATIONSERVERURI}${env.SYSTEM_TEAMPROJECTID}`,
            job_name: env.SYSTEM_DEFINITIONID,
            build_number: env.BUILD_BUILDID
        };
    }
    // if no matches, return null
    return null;
}
exports.getCiInfo = getCiInfo;
async function getGitMetaData() {
    var info = (0, git_repo_info_1.default)();
    if (!info.commonGitDir)
        return {};
    const { remote } = await pGitconfig(info.commonGitDir);
    const remotes = Object.keys(remote).map(remoteName => ({ name: remoteName, url: remote[remoteName]['url'] }));
    return {
        name: 'git',
        sha: info.sha,
        short_sha: info.abbreviatedSha,
        branch: info.branch,
        tag: info.tag,
        committer: info.committer,
        committer_date: info.committerDate,
        author: info.author,
        author_date: info.authorDate,
        commit_message: info.commitMessage,
        root: info.root,
        common_git_dir: info.commonGitDir,
        worktree_git_dir: info.worktreeGitDir,
        last_tag: info.lastTag,
        commits_since_last_tag: info.commitsSinceLastTag,
        remotes: remotes
    };
}
exports.getGitMetaData = getGitMetaData;
function getUniqueIdentifier(test) {
    return `${test.parent} - ${test.title}`;
}
exports.getUniqueIdentifier = getUniqueIdentifier;
function getUniqueIdentifierForCucumber(world) {
    return world.pickle.uri + '_' + world.pickle.astNodeIds.join(',');
}
exports.getUniqueIdentifierForCucumber = getUniqueIdentifierForCucumber;
function getCloudProvider(browser) {
    if (browser.options && browser.options.hostname && browser.options.hostname.includes('browserstack')) {
        return 'browserstack';
    }
    return 'unknown_grid';
}
exports.getCloudProvider = getCloudProvider;
function isBrowserstackSession(browser) {
    if (!browser) {
        return false;
    }
    return getCloudProvider(browser).toLowerCase() == 'browserstack';
}
exports.isBrowserstackSession = isBrowserstackSession;
function getScenarioExamples(world) {
    var _a;
    const scenario = world.pickle;
    // no examples present
    if ((scenario.astNodeIds && scenario.astNodeIds.length <= 1) || scenario.astNodeIds == undefined)
        return;
    const pickleId = scenario.astNodeIds[0];
    const examplesId = scenario.astNodeIds[1];
    const gherkinDocumentChildren = (_a = world.gherkinDocument.feature) === null || _a === void 0 ? void 0 : _a.children;
    let examples = [];
    gherkinDocumentChildren === null || gherkinDocumentChildren === void 0 ? void 0 : gherkinDocumentChildren.forEach(child => {
        var _a;
        if (child.rule) {
            // handle if rule is present
            child.rule.children.forEach(childLevel2 => {
                var _a;
                if (childLevel2.scenario && childLevel2.scenario.id == pickleId && childLevel2.scenario.examples) {
                    const passedExamples = (_a = childLevel2.scenario.examples.flatMap((val) => (val.tableBody)).find((item) => item.id == examplesId)) === null || _a === void 0 ? void 0 : _a.cells.map((val) => (val.value));
                    if (passedExamples)
                        examples = passedExamples;
                }
            });
        }
        else if (child.scenario && child.scenario.id == pickleId && child.scenario.examples) {
            // handle if scenario outside rule
            const passedExamples = (_a = child.scenario.examples.flatMap((val) => (val.tableBody)).find((item) => item.id == examplesId)) === null || _a === void 0 ? void 0 : _a.cells.map((val) => (val.value));
            if (passedExamples)
                examples = passedExamples;
        }
    });
    if (examples.length)
        return examples;
    return;
}
exports.getScenarioExamples = getScenarioExamples;
function removeAnsiColors(message) {
    // https://stackoverflow.com/a/29497680
    // eslint-disable-next-line no-control-regex
    return message.replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '');
}
exports.removeAnsiColors = removeAnsiColors;
function getLogTag(eventType) {
    if (eventType == 'TestRunStarted' || eventType == 'TestRunFinished') {
        return 'Test_Upload';
    }
    else if (eventType == 'HookRunStarted' || eventType == 'HookRunFinished') {
        return 'Hook_Upload';
    }
    else if (eventType == 'ScreenshotCreated') {
        return 'Screenshot_Upload';
    }
    else if (eventType == 'LogCreated') {
        return 'Log_Upload';
    }
    return 'undefined';
}
exports.getLogTag = getLogTag;
async function uploadEventData(eventData, eventUrl = constants_1.DATA_EVENT_ENDPOINT) {
    let logTag = 'BATCH_UPLOAD';
    if (!Array.isArray(eventData)) {
        logTag = getLogTag(eventData.event_type);
    }
    if (eventUrl == constants_1.DATA_SCREENSHOT_ENDPOINT)
        logTag = 'screenshot_upload';
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED) {
        return;
    }
    if (!process.env.BS_TESTOPS_JWT) {
        log.debug(`[${logTag}] Missing Authentication Token/ Build ID`);
        return {
            status: 'error',
            message: 'Token/buildID is undefined, build creation might have failed'
        };
    }
    try {
        const url = `${constants_1.DATA_ENDPOINT}/${eventUrl}`;
        request_handler_1.default.getInstance().pendingUploads += 1;
        const data = await got_1.default.post(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: eventData
        }).json();
        log.debug(`[${logTag}] Success response: ${JSON.stringify(data)}`);
        request_handler_1.default.getInstance().pendingUploads -= 1;
    }
    catch (error) {
        log.debug(`[${logTag}] Failed. Error: ${error}`);
        request_handler_1.default.getInstance().pendingUploads -= 1;
    }
}
exports.uploadEventData = uploadEventData;
// get hierarchy for a particular test (called by reporter for skipped tests)
function getHierarchy(fullTitle) {
    if (!fullTitle)
        return [];
    return fullTitle.split('.').slice(0, -1);
}
exports.getHierarchy = getHierarchy;
function getHookType(hookName) {
    if (hookName.includes('before each')) {
        return 'BEFORE_EACH';
    }
    else if (hookName.includes('before all')) {
        return 'BEFORE_ALL';
    }
    else if (hookName.includes('after each')) {
        return 'AFTER_EACH';
    }
    else if (hookName.includes('after all')) {
        return 'AFTER_ALL';
    }
    return 'unknown';
}
exports.getHookType = getHookType;
function isScreenshotCommand(args) {
    return args.endpoint && args.endpoint.includes('/screenshot');
}
exports.isScreenshotCommand = isScreenshotCommand;
function shouldAddServiceVersion(config, testObservability) {
    if (config.services && config.services.toString().includes('chromedriver') && testObservability != false) {
        return false;
    }
    return true;
}
exports.shouldAddServiceVersion = shouldAddServiceVersion;
async function batchAndPostEvents(eventUrl, kind, data) {
    if (!process.env.BS_TESTOPS_BUILD_COMPLETED || !process.env.BS_TESTOPS_JWT) {
        return;
    }
    try {
        const url = `${constants_1.DATA_ENDPOINT}/${eventUrl}`;
        const response = await got_1.default.post(url, {
            agent: DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env.BS_TESTOPS_JWT}`
            },
            json: data
        }).json();
        log.debug(`[${kind}] Success response: ${JSON.stringify(response)}`);
    }
    catch (error) {
        log.debug(`[${kind}] EXCEPTION IN ${kind} REQUEST TO TEST OBSERVABILITY : ${error}`);
    }
}
exports.batchAndPostEvents = batchAndPostEvents;
function getObservabilityUser(options, config) {
    if (process.env.BROWSERSTACK_USERNAME) {
        return process.env.BROWSERSTACK_USERNAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.user) {
        return options.testObservabilityOptions.user;
    }
    return config.user;
}
exports.getObservabilityUser = getObservabilityUser;
function getObservabilityKey(options, config) {
    if (process.env.BROWSERSTACK_ACCESS_KEY) {
        return process.env.BROWSERSTACK_ACCESS_KEY;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.key) {
        return options.testObservabilityOptions.key;
    }
    return config.key;
}
exports.getObservabilityKey = getObservabilityKey;
function getObservabilityProject(options, bstackProjectName) {
    if (process.env.TEST_OBSERVABILITY_PROJECT_NAME) {
        return process.env.TEST_OBSERVABILITY_PROJECT_NAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.projectName) {
        return options.testObservabilityOptions.projectName;
    }
    return bstackProjectName;
}
exports.getObservabilityProject = getObservabilityProject;
function getObservabilityBuild(options, bstackBuildName) {
    if (process.env.TEST_OBSERVABILITY_BUILD_NAME) {
        return process.env.TEST_OBSERVABILITY_BUILD_NAME;
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.buildName) {
        return options.testObservabilityOptions.buildName;
    }
    return bstackBuildName || path_1.default.basename(path_1.default.resolve(process.cwd()));
}
exports.getObservabilityBuild = getObservabilityBuild;
function getObservabilityBuildTags(options, bstackBuildTag) {
    if (process.env.TEST_OBSERVABILITY_BUILD_TAG) {
        return process.env.TEST_OBSERVABILITY_BUILD_TAG.split(',');
    }
    if (options.testObservabilityOptions && options.testObservabilityOptions.buildTag) {
        return options.testObservabilityOptions.buildTag;
    }
    if (bstackBuildTag) {
        return [bstackBuildTag];
    }
    return [];
}
exports.getObservabilityBuildTags = getObservabilityBuildTags;
const sleep = (ms = 100) => new Promise((resolve) => setTimeout(resolve, ms));
exports.sleep = sleep;
